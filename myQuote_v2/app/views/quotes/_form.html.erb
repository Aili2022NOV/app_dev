  <!-- This will display errors related to both the Quote and its nested categories -->
  <% if quote.errors.any? %>
    <div class="alert alert-danger">
      <ul>
        <% @quote.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
    
  <%= form_with(model: @quote, local: true) do |f| %>
    <!-- Hidden field for user_id -->
    <%= f.hidden_field :user_id, value: current_user.id %>
    <!-- Form fields associated with the quotes table with Bootstrap styling -->
    <div class="form-group" style="padding-bottom: 10px;">
      <%= f.text_area :text, placeholder: 'Description of the quote', class: 'form-control' %>
    </div>
    
    <div class="form-group" style="padding-bottom: 10px;">
      <%= f.text_field :publication_year, placeholder: 'Publication year of the quote', class: 'form-control' %>
    </div>  
    
    <div class="form-group" style="padding-bottom: 10px;">
      <%= f.text_area :comment, placeholder: 'Comments of the quote or leave it blank', class: 'form-control' %>
    </div>
    
    <!-- Quote IsPublic setting form check box with Bootstrap styling -->
    <div class="form-check" style="padding-bottom: 10px;">
      <%= f.label :is_public do %>
      Public
      <%= f.check_box :is_public, class: "form-check-input" %>
      <% end %>
    </div> 
    
    <!-- Allow user to choose one existing philosopher from the drop down list or leave it blank -->
    <div class="form-group">
      <%= f.label :philosopher_id %>
      <%= f.collection_select(:philosopher_id, Philosopher.all, :id, :fname, { include_blank: 'Select a Philosopher' }, class: 'form-control') %>
    </div>
    
    <!-- Container for the quote's categories -->
    <div id="categories-container">
      <!-- Commence looping through each of the quote's categories -->
      <% @quote.quote_categories.each do |quote_category| %>
        <!-- Now create an initial instance of the category field (one row) with Bootstrap styling -->
        <%= f.fields_for :quote_categories, quote_category do |qc| %>
          <div class="category-field row mb-2">
            <div class="col-auto">
    
              <!-- Label & dropdown for selecting a category -->
              <%= qc.label :category_id, "Category", class: "form-label d-inline-block me-2" %>
              <%= qc.select :category_id, Category.all.collect { |cat| [cat.cat_name, cat.id] }, { include_blank: true }, class: "form-control d-inline-block" %>
            </div>
    
            <!-- Allow users to remove a field -->
            <div class="col-auto align-self-end">
            <%= link_to '[-] Remove this category', '#', class: 'remove-category', style: "color: red; text-decoration: none;" %> <!-- Allow users to remove a field -->
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
    
    <div class="mt-3">
      <!-- Create the submit button for the form according to whether it's rendering from new/edit page -->
      <% if quote.new_record?%> 
        <%= f.submit 'Create Quote', class: 'btn btn-primary btn-lg' %>   
      <% else %>  
        <%= f.submit 'Update Quote', class: 'btn btn-primary btn-lg' %> 
      <% end %>
    </div>  
  
  
  <% end %>

  <script>
  // Wait for the document to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Attach an event listener to detect clicks on the "Remove this category" link
    document.addEventListener('click', function(e) {
      if (e.target && e.target.classList.contains('remove-category')) {
        // Prevent the default action of the link
        e.preventDefault();
  
        // Get all the category fields
        const categoryFields = document.querySelectorAll('.category-field');
        // Only remove a category field if there's more than one
        if (categoryFields.length > 1) {
          e.target.closest('.category-field').remove();
        }
      }
    });
  });
  </script>


